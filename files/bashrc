# unset and resource all aliases
unalias -a

if [ -f "~/.aliases" ]; then . "source ~/.aliases"; fi
if [ -f "~/.aliases-private" ]; then . "source ~/.aliases-private"; fi
if [ -f "~/.quick" ]; then . "source ~/.quick"; fi

# unset all functions
for function in `declare -F | awk '{ print $3 }' `; do unset -f  "$function"; done
if [ -f "~/.functions" ]; then . "source ~/.functions"; fi
if [ -f "~/.functions-private" ]; then . "source ~/.functions-private"; fi

# check in ~/.functions for cntrl_c function
trap ctrl_c INT
trap hangup HUP
trap hangup KILL

# enable vi mode (set +o vi to revert)
set -o vi

# set the editor
export EDITOR="vim"

# enable timestamping on bash_history (type history to see timestamps)
export HISTTIMEFORMAT="%d.%m.%y %T "

# set the umask to prevent files from being created with access
# to group members or others
umask 0077

# custom compiled software (./configure --prefix=~/install)
PATH=$PATH:~/install/bin

if [ `uname` == Darwin ]; then
    # suppress deprecation warning
    export BASH_SILENCE_DEPRECATION_WARNING=1
    # use UTF-8.
    export LC_ALL=en_US.UTF-8

    PATH=$PATH:/opt/local/bin

    # terraform
    PATH="/usr/local/opt/terraform@0.11/bin:$PATH"

    export ANDROID_HOME=$HOME/Library/Android
    export JAVA_HOME=`/usr/libexec/java_home -v 1.6`

    # go
    export GOPATH=~/working/github/go
    PATH=$PATH:~/working/github/go/bin

    # az cli, installed via brew
    source /usr/local/etc/bash_completion.d/az

    # fastlane
    export PATH="$HOME/.fastlane/bin:$PATH"

    # gcloud
    if [ -f "$HOME/google-cloud-sdk/path.bash.inc" ]; then . "$HOME/google-cloud-sdk/path.bash.inc"; fi
    if [ -f "$HOME/google-cloud-sdk/completion.bash.inc" ]; then . "$HOME/google-cloud-sdk/path.bash.inc"; fi

    export NVM_DIR="$HOME/.nvm"
    [ -s "/usr/local/opt/nvm/nvm.sh" ] && . "/usr/local/opt/nvm/nvm.sh"  # This loads nvm
    [ -s "/usr/local/opt/nvm/etc/bash_completion" ] && . "/usr/local/opt/nvm/etc/bash_completion"  # This loads nvm bash_completion
    alias cd='cdnvm'

elif [ `uname` == Linux ]; then
    # init volume to 20.
    #amixer sset Master 67%
    PATH=$PATH:/opt/local/scripts
    PATH=$PATH:~/.cabal/bin
    PATH=$PATH:/usr/local/heroku/bin
    # vendor perl, for perlbrew
    PATH=$PATH:/usr/bin/vendor_perl
    #disable terminal beep
    # setterm -blength 0
    # X Desktop Group Configuration Paths
    export XDG_CONFIG_HOME=$HOME/.config
    export XDG_CACHE_HOME=$HOME/.cache
    # use the default POSIX/C locale, print only standard ASCII characters.
    export LC_ALL=C
    export JAVA_HOME=/opt/local/jdk1.7.0_45
fi

# from functions
bash_prompt
loadrbenv

# also see efnet/freenode functions in ~/.functions
export IRCSERVER="irc.servercentral.net 9999 IRC-SSL"
export IRCNICK="dps"
export IRCNAME="dps"

# set cvs remote shell
export CVS_RSH=ssh

# exempt commands that start with spaces from ~/.bash_history
export HISTCONTROL=ignorespace

#if [[ $TERM == xterm || $TERM == "rxvt-unicode-256color" || $TERM == "xterm-256color"]]; then
if [[ -z "$SSH_TTY" && `uname -a` =~ ARCH ]]; then
    # then it is a console (not ssh session)
    echo "This looks like an xsession, running xset..."
    # disable audible beep for X11
    xset -b
    # set the mouse tracking speed to fast
    xset m 7 10
    # set the keyboard repeat rate, karabiner 200, 10
    xset r rate 200 100

    # re-hash this with every load
    xrdb -load ~/.Xresources

    # verify settings

    #xrdb -query
fi

if [ ! -d ~/.mcabber/otr ]; then
    echo "Configuring directory for mcabber OTR keys..."
    mkdir -p ~/.mcabber/otr
    chmod -R 700 ~/.mcabber
fi

# Use bash completion, if it exists - linux.cs.uchicago.edu
[[ $PS1 && -f /usr/share/bash-completion/bash_completion ]] && \
    . /usr/share/bash-completion/bash_completion
