# unset currently set functions
for function in `declare -F | awk '{ print $3 }' `; do unset -f $function; done

cb () {
  xclip -out | xclip -selection clipboard
}

# this function will return 1 a named screen instance exists, 0 if it doesnt
doesnamedscreenexist(){
    if [[ $# -lt 1 ]]; then
        echo "Usage: doesnamedscreenexist <name>"
        echo "Example: doesnamedscreenexist mail"
        return -1
    fi
    if [[ `screen -ls | grep $1 | wc -l` -eq '1' ]]; then
        echo -n "1"
    else
        echo -n "0"
    fi
}

freenode(){
    if [[ `doesnamedscreenexist freenode` -eq '1' ]]; then
        export IRCSERVER="irc.freenode.net"
        screen -rd freenode
    else
        screen -S freenode epic -l ~/.freenode.ircrc
    fi
}

efnet(){
    if [[ `doesnamedscreenexist efnet` -eq '1' ]]; then
        screen -rd efnet
    else
        screen -S efnet epic -l ~/.efnet.ircrc
    fi
}

jabber () {
    if [ `screen -list | grep jabber | wc -l` == "1" ]; then
        screen -rd jabber
    else
        screen -S jabber mcabber
    fi
}

topdisk() {
    dstat -ta --top-bio
}


# Kill every open RDP session
rdpkill () {
    for i in `ps -ef | grep rdesktop | grep -v grep | awk '{ print $2 }'`; do kill $i; done
    # MacOS
    for i in `pgrep Microsoft Remote Desktop`; do kill $i; done
}

resetclip () {
    kill `pgrep autocutsel`;
    autocutsel -selection CLIPBOARD -fork;
    autocutsel -selection PRIMARY -fork
}

killrdp () {
    rdpkill
}

bash_prompt () {
    local txtblk='\e[0;30m' # Black - Regular
    local txtred='\e[0;31m' # Red
    local txtgrn='\e[0;32m' # Green
    local txtylw='\e[0;33m' # Yellow
    local txtblu='\e[0;34m' # Blue
    local txtpur='\e[0;35m' # Purple
    local txtcyn='\e[0;36m' # Cyan
    local txtwht='\e[0;37m' # White
    local bldblk='\e[1;30m' # Black - Bold
    local bldred='\e[1;31m' # Red
    local bldgrn='\e[1;32m' # Green
    local bldylw='\e[1;33m' # Yellow
    local bldblu='\e[1;34m' # Blue
    local bldpur='\e[1;35m' # Purple
    local bldcyn='\e[1;36m' # Cyan
    local bldwht='\e[1;37m' # White
    FMAG="\[\033[35m\]"
    export PS1="--[\u@\h]-[\w]-[$RAILS_ENV]-\n> "
    # colors must be surrounded with \[  \]
    #PS1="--[\[$bldblu\]\u@\h]-[\w]--\n> "
}
PROMPT_COMMAND="bash_prompt"

sldap () {
  ldapsearch -v -x -LLL -W -H ldaps://ldap.uchicago.edu -b dc=uchicago,dc=edu \
  '( & (eduPersonAffiliation=student)(sn=Smith) )' cn telephoneNumber -D \
  "uid=dansully,ou=people,dc=uchicago,dc=edu"
}

getemail () {
  for chicagoid in `cat /tmp/cnets.txt`; do
    EMAIL=`ldapsearch -x -LLL -h ldap.uchicago.edu -p 389 -b dc=uchicago,dc=edu chicagoID=$chicagoid mail | grep -v "^filter" | grep -v "^dn:" | awk '{ print $2 }'`
    echo "$chicagoid $EMAIL"
  done
}

# query google's dns servers
qg () {
    dig @8.8.8.8 $1
}

screenshot () {
    import ~/working/temp/screenshots/screenshot-`date +%m`.`date +%d`.`date +%y`.jpg
    echo "The screenshot can be picked up at ~/working/temp/screenshots"
}

rdp () {
    rdesktop -K $1 &
}

short () {
    export QUERY_RESULT=`dig +short $1 | tail -n 1 | awk '{ print $NF }' | tr -d '\n'`
    dig $1
    if [ `uname` == Darwin ]; then
        echo -n $QUERY_RESULT | pbcopy
    elif [ `uname` == Linux ]; then
        echo -n $QUERY_RESULT | xclip
        xclip -out | xclip -selection clipboard
    else
        echo -n "Unknown platform"
    fi
        unset QUERY_RESULT
}

whatismyip () {
    curl http://icanhazip.com/
}

now () {
    echo `date +%m`-`date +%d`-`date +%y`.`date +%H`.`date +%M`.`date +%S`
}

# virtualbox show vminfo
vminfo () {
    vboxmanage showvminfo $1
}

listdcs () {
    dig any _kerberos._tcp.$1
}

loadrvm() {
   if [ -e ~/.rvm/scripts/rvm ]; then
      source ~/.rvm/scripts/rvm > /dev/null
      #export PATH=$HOME/.rvm/bin:$PATH;
      rvm list
      echo "RVM Loaded."
   else
      echo "RVM Not installed."
   fi
}

loadrbenv() {
    if hash rbenv 2>/dev/null; then
        eval "$(rbenv init -)"
    fi
}

if [ `uname` == Darwin ]; then
    dock() {
      echo "dock"
      osascript -e 'quit app "Messages"'
      killall Dock
      osascript -e 'launch app "Messages"'
    }
fi

if [[ `uname -r` =~ ARCH ]]; then
    whatprovides () {
        pkgfile $1
    }
fi
