source ~/.aliases
source ~/.aliases-private
source ~/.functions-zsh
source ~/.quick

# set the umask to prevent files from being created with access
# to group members or others
umask 0077

# gcloud
if [ -f "$HOME/google-cloud-sdk/path.zsh.inc" ]; then . "$HOME/google-cloud-sdk/path.zsh.inc"; fi
if [ -f "$HOME/google-cloud-sdk/completion.zsh.inc" ]; then . "$HOME/google-cloud-sdk/path.zsh.inc"; fi

# nvm
export NVM_DIR="$HOME/.nvm"
[ -s "/usr/local/opt/nvm/nvm.sh" ] && . "/usr/local/opt/nvm/nvm.sh"  # This loads nvm
[ -s "/usr/local/opt/nvm/etc/bash_completion" ] && . "/usr/local/opt/nvm/etc/bash_completion"  # This loads nvm bash_completion

# nvm automatially change version when entering a directory with .nvmrc
autoload -U add-zsh-hook
load-nvmrc() {
  local node_version="$(nvm version)"
  local nvmrc_path="$(nvm_find_nvmrc)"

  if [ -n "$nvmrc_path" ]; then
    local nvmrc_node_version=$(nvm version "$(cat "${nvmrc_path}")")

    if [ "$nvmrc_node_version" = "N/A" ]; then
      nvm install
    elif [ "$nvmrc_node_version" != "$node_version" ]; then
      nvm use
    fi
  elif [ "$node_version" != "$(nvm version default)" ]; then
    echo "Reverting to nvm default version"
    nvm use default
  fi
}

# rbenv
if hash rbenv 2>/dev/null; then
  eval "$(rbenv init -)"
fi

# pyenv
if command -v pyenv 1>/dev/null 2>&1; then
  eval "$(pyenv init -)"
fi

if [[ `uname` == Darwin ]]; then
  # android studio
  export ANDROID_SDK=$HOME/Library/Android/sdk
  export ANDROID_SDK_ROOT=$HOME/Library/Android/sdk
  export PATH=$PATH:$HOME/Library/Android/sdk/tools/bin
  export PATH=$PATH:$HOME/Library/Android/sdk/emulator
  export PATH=$PATH:$HOME/Library/Android/sdk/platform-tools

  # go, installed via brew
  export GOPATH=$HOME/go
  export PATH="$PATH:${GOPATH}/bin"
fi

# set the locale
export LC_ALL=en_US.UTF-8

# aws cli tools
export AWS_PAGER=""|

# custom compiled software (./configure --prefix=~/install)
export PATH=$PATH:~/install/bin

# also see efnet/freenode functions in ~/.functions
export IRCSERVER="irc.servercentral.net 9999 IRC-SSL"
export IRCNICK="dps"
export IRCNAME="dps"

# don't share history
setopt no_share_history
unsetopt share_history
